<dec f='codebrowser/source/geometry/solids/CSG/include/G4Cons.hh' l='142' type='G4double G4Cons::DistanceToIn(const G4ThreeVector &amp; p, const G4ThreeVector &amp; v) const'/>
<inh f='codebrowser/source/geometry/management/include/G4VSolid.hh' l='130' c='_ZNK8G4VSolid12DistanceToInERKN5CLHEP10Hep3VectorES3_'/>
<def f='codebrowser/source/geometry/solids/CSG/src/G4Cons.cc' l='661' ll='1322' type='G4double G4Cons::DistanceToIn(const G4ThreeVector &amp; p, const G4ThreeVector &amp; v) const'/>
<use f='codebrowser/source/geometry/solids/CSG/src/G4Cons.cc' l='851' u='c' c='_ZNK6G4Cons12DistanceToInERKN5CLHEP10Hep3VectorES3_'/>
<use f='codebrowser/source/geometry/solids/CSG/src/G4Cons.cc' l='973' u='c' c='_ZNK6G4Cons12DistanceToInERKN5CLHEP10Hep3VectorES3_'/>
<use f='codebrowser/source/geometry/solids/CSG/src/G4Cons.cc' l='1042' u='c' c='_ZNK6G4Cons12DistanceToInERKN5CLHEP10Hep3VectorES3_'/>
<use f='codebrowser/source/geometry/solids/CSG/src/G4Cons.cc' l='1091' u='c' c='_ZNK6G4Cons12DistanceToInERKN5CLHEP10Hep3VectorES3_'/>
<use f='codebrowser/source/geometry/solids/CSG/src/G4Cons.cc' l='1179' u='c' c='_ZNK6G4Cons12DistanceToInERKN5CLHEP10Hep3VectorES3_'/>
<use f='codebrowser/source/geometry/solids/CSG/src/G4Cons.cc' l='1214' u='c' c='_ZNK6G4Cons12DistanceToInERKN5CLHEP10Hep3VectorES3_'/>
<doc f='codebrowser/source/geometry/solids/CSG/src/G4Cons.cc' l='637'>////////////////////////////////////////////////////////////////////////
//
// Calculate distance to shape from outside, along normalised vector
// - return kInfinity if no intersection, or intersection distance &lt;= tolerance
//
// - Compute the intersection with the z planes 
//        - if at valid r, phi, return
//
// -&gt; If point is outside cone, compute intersection with rmax1*0.5
//        - if at valid phi,z return
//        - if inside outer cone, handle case when on tolerant outer cone
//          boundary and heading inwards(-&gt;0 to in)
//
// -&gt; Compute intersection with inner cone, taking largest +ve root
//        - if valid (in z,phi), save intersction
//
//    -&gt; If phi segmented, compute intersections with phi half planes
//        - return smallest of valid phi intersections and
//          inner radius intersection
//
// NOTE:
// - `if valid&apos; implies tolerant checking of intersection points
// - z, phi intersection from Tubs</doc>
