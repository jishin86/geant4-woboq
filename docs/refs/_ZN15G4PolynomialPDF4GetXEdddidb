<dec f='codebrowser/source/processes/hadronic/models/util/include/G4PolynomialPDF.hh' l='100' type='G4double G4PolynomialPDF::GetX(G4double p, G4double x1, G4double x2, G4int ddxPower = 0, G4double guess = 9.9999999999999997E+98, G4bool bisect = true)'/>
<use f='codebrowser/source/processes/hadronic/models/util/include/G4PolynomialPDF.hh' l='102' u='c' c='_ZN15G4PolynomialPDF14EvalInverseCDFEd'/>
<doc f='codebrowser/source/processes/hadronic/models/util/include/G4PolynomialPDF.hh' l='89'>// Find a value x between x1 and x2 at which ddxPower[PDF](x) = p.
    // ddxPower = -1 -&gt; CDF; 
    // ddxPower = 0 -&gt; PDF
    // ddxPower = 1 -&gt; PDF&apos;
    // (ddxPower = 2 not implemented)
    // Solves analytically when possible, and otherwise uses the Newton-Raphson
    // method to find the zero of ddxPower[PDF](x) - p.
    // If not found in range, returns the nearest boundary.
    // Beware that if x1 and x2 are not set carefully there may be multiple
    // solutions, and care is not taken to select a particular one among them.
    // Returns x2 on error</doc>
<use f='codebrowser/source/processes/hadronic/models/util/src/G4PolynomialPDF.cc' l='199' u='c' c='_ZN15G4PolynomialPDF18HasNegativeMinimumEdd'/>
<def f='codebrowser/source/processes/hadronic/models/util/src/G4PolynomialPDF.cc' l='223' ll='390' type='G4double G4PolynomialPDF::GetX(G4double p, G4double x1, G4double x2, G4int ddxPower = 0, G4double guess = 9.9999999999999997E+98, G4bool bisect = true)'/>
<use f='codebrowser/source/processes/hadronic/models/util/src/G4PolynomialPDF.cc' l='395' u='c' c='_ZN15G4PolynomialPDF6BisectEddd'/>
