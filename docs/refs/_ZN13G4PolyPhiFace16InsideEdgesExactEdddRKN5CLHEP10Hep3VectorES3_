<dec f='codebrowser/source/geometry/solids/specific/include/G4PolyPhiFace.hh' l='147' type='G4bool G4PolyPhiFace::InsideEdgesExact(G4double r, G4double z, G4double normSign, const G4ThreeVector &amp; p, const G4ThreeVector &amp; v)'/>
<use f='codebrowser/source/geometry/solids/specific/src/G4PolyPhiFace.cc' l='437' u='c' c='_ZN13G4PolyPhiFace9IntersectERKN5CLHEP10Hep3VectorES3_bdRdS4_RS1_Rb'/>
<def f='codebrowser/source/geometry/solids/specific/src/G4PolyPhiFace.cc' l='682' ll='785' type='G4bool G4PolyPhiFace::InsideEdgesExact(G4double r, G4double z, G4double normSign, const G4ThreeVector &amp; p, const G4ThreeVector &amp; v)'/>
<doc f='codebrowser/source/geometry/solids/specific/src/G4PolyPhiFace.cc' l='662'>//
//-------------------------------------------------------
  
  
//
// InsideEdgesExact
//
// Decide if the point in r,z is inside the edges of our face,
// **but** do so consistently with other faces.
//
// This routine has functionality similar to InsideEdges, but uses
// an algorithm to decide if a trajectory falls inside or outside the
// face that uses only the trajectory p,v values and the three dimensional
// points representing the edges of the polygon. The objective is to plug up
// any leaks between touching G4PolyPhiFaces (at r==0) and any other face
// that uses the same convention.
//
// See: &quot;Computational Geometry in C (Second Edition)&quot;
// http://cs.smith.edu/~orourke/
//</doc>
