<dec f='codebrowser/source/processes/hadronic/models/binary_cascade/include/G4RKFieldIntegrator.hh' l='48' type='G4double G4RKFieldIntegrator::GetExcitationEnergy(G4int nHitNucleons, const G4KineticTrackVector &amp; theParticles)'/>
<inh f='codebrowser/source/processes/hadronic/models/binary_cascade/include/G4FieldPropagation.hh' l='51' c='_ZN18G4FieldPropagation19GetExcitationEnergyEiRK20G4KineticTrackVector'/>
<def f='codebrowser/source/processes/hadronic/models/binary_cascade/src/G4RKFieldIntegrator.cc' l='185' ll='194' type='G4double G4RKFieldIntegrator::GetExcitationEnergy(G4int nHitNucleons, const G4KineticTrackVector &amp; )'/>
<doc f='codebrowser/source/processes/hadronic/models/binary_cascade/src/G4RKFieldIntegrator.cc' l='159'>/*
G4double G4RKFieldIntegrator::GetExcitationEnergy(const G4KineticTrackVector &amp;theParticles)
{
   // Excitation energy of a fragment consisting from A nucleons and Z protons
   // is Etot - Z*Mp - (A - Z)*Mn - B(A, Z), where B(A,Z) is the binding energy of fragment
   //  and Mp, Mn are proton and neutron mass, respectively.
   G4int NZ = 0;
   G4int NA = 0;
   G4double Etot = CalculateTotalEnergy(theParticles);
   for(G4int cParticle = 0; cParticle &lt; theParticles.length(); cParticle++)
      {
      G4KineticTrack* pKineticTrack = theParticles.at(cParticle);
      G4int Encoding =  std::abs(pKineticTrack-&gt;GetDefinition()-&gt;GetPDGEncoding());
      if (Encoding == 2212)
          NZ++, NA++;
      if (Encoding == 2112)
          NA++;
      Etot -= pKineticTrack-&gt;GetDefinition()-&gt;GetPDGMass();
      }
   return Etot - G4NucleiProperties::GetBindingEnergy(NZ, NA);
}
*/

//*************************************************************************************************************************************
//This is a simplified method to get excitation energy of a residual
// nucleus with nHitNucleons.</doc>
