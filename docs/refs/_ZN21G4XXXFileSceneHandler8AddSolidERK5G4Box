<dec f='codebrowser/source/visualization/XXX/include/G4XXXFileSceneHandler.hh' l='49' type='void G4XXXFileSceneHandler::AddSolid(const G4Box &amp; )'/>
<doc f='codebrowser/source/visualization/XXX/include/G4XXXFileSceneHandler.hh' l='47'>////////////////////////////////////////////////////////////////
  // Optional virtual functions...</doc>
<inh f='codebrowser/source/visualization/management/include/G4VSceneHandler.hh' l='107' c='_ZN15G4VSceneHandler8AddSolidERK5G4Box'/>
<def f='codebrowser/source/visualization/XXX/src/G4XXXFileSceneHandler.cc' l='97' ll='114' type='void G4XXXFileSceneHandler::AddSolid(const G4Box &amp; box)'/>
<doc f='codebrowser/source/visualization/XXX/src/G4XXXFileSceneHandler.cc' l='89'>// Note: This function overrides G4VSceneHandler::AddSolid(const
// G4Box&amp;).  You may not want to do this, but this is how it&apos;s done if
// you do.  Certain other specific solids may be treated this way -
// see G4VSceneHandler.hh.  The simplest possible driver would *not*
// implement these polymorphic functions, with the effect that the
// default versions in G4VSceneHandler are used, which simply call
// G4VSceneHandler::RequestPrimitives to turn the solid into a
// G4Polyhedron usually.</doc>
