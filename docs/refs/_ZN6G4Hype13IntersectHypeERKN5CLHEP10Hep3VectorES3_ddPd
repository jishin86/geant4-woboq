<dec f='codebrowser/source/geometry/solids/specific/include/G4Hype.hh' l='164' type='static G4int G4Hype::IntersectHype(const G4ThreeVector &amp; p, const G4ThreeVector &amp; v, G4double r2, G4double tan2Phi, G4double * s)'/>
<use f='codebrowser/source/geometry/solids/specific/src/G4Hype.cc' l='510' u='c' c='_ZNK6G4Hype12DistanceToInERKN5CLHEP10Hep3VectorES3_'/>
<use f='codebrowser/source/geometry/solids/specific/src/G4Hype.cc' l='569' u='c' c='_ZNK6G4Hype12DistanceToInERKN5CLHEP10Hep3VectorES3_'/>
<use f='codebrowser/source/geometry/solids/specific/src/G4Hype.cc' l='784' u='c' c='_ZNK6G4Hype13DistanceToOutERKN5CLHEP10Hep3VectorES3_bPbPS1_'/>
<use f='codebrowser/source/geometry/solids/specific/src/G4Hype.cc' l='838' u='c' c='_ZNK6G4Hype13DistanceToOutERKN5CLHEP10Hep3VectorES3_bPbPS1_'/>
<def f='codebrowser/source/geometry/solids/specific/src/G4Hype.cc' l='967' ll='1011' type='static G4int G4Hype::IntersectHype(const G4ThreeVector &amp; p, const G4ThreeVector &amp; v, G4double r2, G4double tan2Phi, G4double * ss)'/>
<doc f='codebrowser/source/geometry/solids/specific/src/G4Hype.cc' l='928'>//
// IntersectHype (static)
//
// Decide if and where a line intersects with a hyperbolic
// surface (of infinite extent)
//
// Arguments:
//     p       - (in) Point on trajectory
//     v       - (in) Vector along trajectory
//     r2      - (in) Square of radius at z = 0
//     tan2phi - (in) std::tan(phi)**2
//     q       - (out) Up to two points of intersection, where the
//                     intersection point is p + q*v, and if there are
//                     two intersections, q[0] &lt; q[1]. May be negative.
// Returns:
//     The number of intersections. If 0, the trajectory misses. 
//
//
// Equation of a line:
//
//       x = x0 + q*tx      y = y0 + q*ty      z = z0 + q*tz
//
// Equation of a hyperbolic surface:
//
//       x**2 + y**2 = r**2 + (z*tanPhi)**2
//
// Solution is quadratic:
//
//  a*q**2 + b*q + c = 0
//
// where:
//
//  a = tx**2 + ty**2 - (tz*tanPhi)**2
//
//  b = 2*( x0*tx + y0*ty - z0*tz*tanPhi**2 )
//
//  c = x0**2 + y0**2 - r**2 - (z0*tanPhi)**2
//
// </doc>
<doc f='codebrowser/source/geometry/solids/specific/include/G4Hype.hh' l='162'>// values of hype radius at a given Z</doc>
