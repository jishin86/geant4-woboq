<dec f='codebrowser/source/geometry/solids/specific/include/G4Hype.hh' l='115' type='G4double G4Hype::DistanceToIn(const G4ThreeVector &amp; p, const G4ThreeVector &amp; v) const'/>
<inh f='codebrowser/source/geometry/management/include/G4VSolid.hh' l='130' c='_ZNK8G4VSolid12DistanceToInERKN5CLHEP10Hep3VectorES3_'/>
<def f='codebrowser/source/geometry/solids/specific/src/G4Hype.cc' l='357' ll='630' type='G4double G4Hype::DistanceToIn(const G4ThreeVector &amp; p, const G4ThreeVector &amp; v) const'/>
<doc f='codebrowser/source/geometry/solids/specific/src/G4Hype.cc' l='347'>//
// Calculate distance to shape from outside, along normalised vector
// - return kInfinity if no intersection,
//   or intersection distance &lt;= tolerance
//
// Calculating the intersection of a line with the surfaces
// is fairly straight forward. The difficult problem is dealing
// with the intersections of the surfaces in a consistent manner, 
// and this accounts for the complicated logic.
//</doc>
