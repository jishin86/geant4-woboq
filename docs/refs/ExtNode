<def f='codebrowser/source/graphics_reps/src/BooleanProcessor.src' l='110' ll='128'/>
<size>40</size>
<doc f='codebrowser/source/graphics_reps/src/BooleanProcessor.src' l='73'>/*
template&lt;class T&gt;
class vector {
 private:
  int cur_size, max_size;
  T * v;

 public:
  vector(): cur_size(0), max_size(INITIAL_SIZE), v(new T[INITIAL_SIZE]) {}
  ~vector() { delete [] v; }  

  void      clear()                 { cur_size = 0; }
  int       size()            const { return cur_size; }
  T &amp;       operator[](int i)       { return v[i]; }
  const T &amp; operator[](int i) const { return v[i]; }
  T &amp;       front()                 { return v[0]; }
  const T &amp; front()           const { return v[0]; }
  T &amp;       back()                  { return v[cur_size-1]; }
  const T &amp; back()            const { return v[cur_size-1]; }
  void      pop_back()              { cur_size--; }
  void      push_back(const T &amp; a) {
    if (cur_size == max_size) {
      T * w     = v;
      max_size *= 2;
      v         = new T[max_size];
      for (int i=0; i&lt;cur_size; i++) v[i] = w[i];
      v[cur_size++] = a;
      delete [] w;
    }else{
      v[cur_size++] = a;
    }
  }
};
*/
//G.Barrand : end

// ---------------------------------------------------- Extended node ---</doc>
<mbr r='ExtNode::v' o='0' t='HVPoint3D'/>
<mbr r='ExtNode::s' o='256' t='int'/>
<fun r='_ZN7ExtNodeC1EN7HepGeom7Point3DIdEEi'/>
<fun r='_ZN7ExtNodeD1Ev'/>
<fun r='_ZN7ExtNodeC1ERKS_'/>
<fun r='_ZN7ExtNodeaSERKS_'/>
