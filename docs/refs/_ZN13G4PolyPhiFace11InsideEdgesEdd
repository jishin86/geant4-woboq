<dec f='codebrowser/source/geometry/solids/specific/include/G4PolyPhiFace.hh' l='152' type='G4bool G4PolyPhiFace::InsideEdges(G4double r, G4double z)'/>
<doc f='codebrowser/source/geometry/solids/specific/include/G4PolyPhiFace.hh' l='149'>// Decide if the point in r,z is inside the edges of our face,
      // **but** do so consistently with other faces.</doc>
<def f='codebrowser/source/geometry/solids/specific/src/G4PolyPhiFace.cc' l='815' ll='829' type='G4bool G4PolyPhiFace::InsideEdges(G4double r, G4double z)'/>
<doc f='codebrowser/source/geometry/solids/specific/src/G4PolyPhiFace.cc' l='788'>//
// InsideEdges (don&apos;t care aboud distance)
//
// Decide if the point in r,z is inside the edges of our face
//
// This routine can be made a zillion times quicker by implementing
// better code, for example:
//
//    int pnpoly(int npol, float *xp, float *yp, float x, float y)
//    {
//      int i, j, c = 0;
//      for (i = 0, j = npol-1; i &lt; npol; j = i++) {
//        if ((((yp[i]&lt;=y) &amp;&amp; (y&lt;yp[j])) ||
//             ((yp[j]&lt;=y) &amp;&amp; (y&lt;yp[i]))) &amp;&amp;
//            (x &lt; (xp[j] - xp[i]) * (y - yp[i]) / (yp[j] - yp[i]) + xp[i]))
//
//          c = !c;
//      }
//      return c;
//    }
//
// See &quot;Point in Polyon Strategies&quot;, Eric Haines [Graphic Gems IV]  pp. 24-46
//
// My algorithm below is rather unique, but is based on code needed to
// calculate the distance to the shape. I left it in here because ...
// well ... to test it better.
//</doc>
