<def f='codebrowser/source/analysis/g4tools/include/tools/sg/plots' l='446' ll='491' type='void tools::sg::plots::set_regions(unsigned int a_cols = 1, unsigned int a_rows = 1, bool a_transfer = false)'/>
<use f='codebrowser/source/analysis/g4tools/include/tools/sg/plots' l='500' u='c' c='_ZN5tools2sg5plots14current_to_oneEv'/>
<doc f='codebrowser/source/analysis/g4tools/include/tools/sg/plots' l='397'>/*
  bool find_plotter(unsigned int a_ww,unsigned int a_wh,
                    float a_x,float a_y,
                    unsigned int&amp; a_index) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    if(to_update()) update_sg();

    a_index = 0;

    if(!a_ww) return false;
    if(!a_wh) return false;

    float aspect = float(a_ww)/float(a_wh);

    // one plotter in pixels :
    unsigned int rw = (unsigned int)(float(a_ww)/float(cols.value()));
    unsigned int rh = (unsigned int)(float(a_wh)/float(rows.value()));
    float ra = float(rw)/float(rh);

    // all window wc :
    float wh_wc = 1;
    float ww_wc = wh_wc * aspect;

    // plotter size in window wc :
    float rh_wc = wh_wc/rows;
    float rw_wc = rh_wc*ra;

    unsigned int _number = m_sep.size();    
    for(unsigned int index=0;index&lt;_number;index++) {
      unsigned int row = index/cols;
      unsigned int col = index-cols*row;

      float x = -ww_wc*0.5f + col * rw_wc + rw_wc * 0.5f;
      float y =  wh_wc*0.5f - row * rh_wc - rh_wc * 0.5f;

      if( ((x-rw_wc*0.5f)&lt;a_x)&amp;&amp;(a_x&lt;(x+rw_wc*0.5f)) &amp;&amp;
          ((y-rh_wc*0.5f)&lt;a_y)&amp;&amp;(a_y&lt;(y+rh_wc*0.5f)) ){
        a_index = index;
        return true;
      }
    }    

    return false;
  }  
*/</doc>
