<dec f='codebrowser/source/processes/hadronic/models/particle_hp/include/G4ParticleHPInelastic.hh' l='101' type='G4int G4ParticleHPInelastic::GetVerboseLevel() const'/>
<def f='codebrowser/source/processes/hadronic/models/particle_hp/src/G4ParticleHPInelastic.cc' l='407' ll='410' type='G4int G4ParticleHPInelastic::GetVerboseLevel() const'/>
<doc f='codebrowser/source/processes/hadronic/models/particle_hp/src/G4ParticleHPInelastic.cc' l='338'>/*
void G4ParticleHPInelastic::addChannelForNewElement()
{
   for ( G4int i = numEle ; i &lt; (G4int)G4Element::GetNumberOfElements() ; i++ ) 
   {
      G4cout &lt;&lt; &quot;G4ParticleHPInelastic Prepairing Data for the new element of &quot; &lt;&lt; (*(G4Element::GetElementTable()))[i]-&gt;GetName() &lt;&lt; G4endl;

      theInelastic.push_back( new G4ParticleHPChannelList );
      (*theInelastic[i]).Init((*(G4Element::GetElementTable()))[i], dirName, theProjectile);
      G4int itry = 0;
      do
      {
         (*theInelastic[i]).Register(&amp;theNFS, &quot;F01&quot;); // has
         (*theInelastic[i]).Register(&amp;theNXFS, &quot;F02&quot;);
         (*theInelastic[i]).Register(&amp;the2NDFS, &quot;F03&quot;);
         (*theInelastic[i]).Register(&amp;the2NFS, &quot;F04&quot;); // has, E Done
         (*theInelastic[i]).Register(&amp;the3NFS, &quot;F05&quot;); // has, E Done
         (*theInelastic[i]).Register(&amp;theNAFS, &quot;F06&quot;);
         (*theInelastic[i]).Register(&amp;theN3AFS, &quot;F07&quot;);
         (*theInelastic[i]).Register(&amp;the2NAFS, &quot;F08&quot;);
         (*theInelastic[i]).Register(&amp;the3NAFS, &quot;F09&quot;);
         (*theInelastic[i]).Register(&amp;theNPFS, &quot;F10&quot;);
         (*theInelastic[i]).Register(&amp;theN2AFS, &quot;F11&quot;);
         (*theInelastic[i]).Register(&amp;the2N2AFS, &quot;F12&quot;);
         (*theInelastic[i]).Register(&amp;theNDFS, &quot;F13&quot;);
         (*theInelastic[i]).Register(&amp;theNTFS, &quot;F14&quot;);
         (*theInelastic[i]).Register(&amp;theNHe3FS, &quot;F15&quot;);
         (*theInelastic[i]).Register(&amp;theND2AFS, &quot;F16&quot;);
         (*theInelastic[i]).Register(&amp;theNT2AFS, &quot;F17&quot;);
         (*theInelastic[i]).Register(&amp;the4NFS, &quot;F18&quot;); // has, E Done
         (*theInelastic[i]).Register(&amp;the2NPFS, &quot;F19&quot;);
         (*theInelastic[i]).Register(&amp;the3NPFS, &quot;F20&quot;);
         (*theInelastic[i]).Register(&amp;theN2PFS, &quot;F21&quot;);
         (*theInelastic[i]).Register(&amp;theNPAFS, &quot;F22&quot;);
         (*theInelastic[i]).Register(&amp;thePFS, &quot;F23&quot;);
         (*theInelastic[i]).Register(&amp;theDFS, &quot;F24&quot;);
         (*theInelastic[i]).Register(&amp;theTFS, &quot;F25&quot;);
         (*theInelastic[i]).Register(&amp;theHe3FS, &quot;F26&quot;);
         (*theInelastic[i]).Register(&amp;theAFS, &quot;F27&quot;);
         (*theInelastic[i]).Register(&amp;the2AFS, &quot;F28&quot;);
         (*theInelastic[i]).Register(&amp;the3AFS, &quot;F29&quot;);
         (*theInelastic[i]).Register(&amp;the2PFS, &quot;F30&quot;);
         (*theInelastic[i]).Register(&amp;thePAFS, &quot;F31&quot;);
         (*theInelastic[i]).Register(&amp;theD2AFS, &quot;F32&quot;);
         (*theInelastic[i]).Register(&amp;theT2AFS, &quot;F33&quot;);
         (*theInelastic[i]).Register(&amp;thePDFS, &quot;F34&quot;);
         (*theInelastic[i]).Register(&amp;thePTFS, &quot;F35&quot;);
         (*theInelastic[i]).Register(&amp;theDAFS, &quot;F36&quot;);
         (*theInelastic[i]).RestartRegistration();
         itry++;
      }
      while( !(*theInelastic[i]).HasDataInAnyFinalState() &amp;&amp; itry &lt; 6 );
                                                                  // 6 is corresponding to the value(5) of G4ParticleHPChannel. TK  

      if ( itry == 6 ) 
      {
         // No Final State at all.
         G4bool exceptional = false;
         if ( (*(G4Element::GetElementTable()))[i]-&gt;GetNumberOfIsotopes() == 1 )
         {
            if ( (*(G4Element::GetElementTable()))[i]-&gt;GetIsotope( 0 )-&gt;GetZ() == 1 &amp;&amp; (*(G4Element::GetElementTable()))[i]-&gt;GetIsotope( 0 )-&gt;GetN() == 1 ) exceptional = true;  //1H
         } 
         if ( !exceptional ) throw G4HadronicException(__FILE__, __LINE__, &quot;Channel: Do not know what to do with this element&quot;);
      }
   }

   numEle = (G4int)G4Element::GetNumberOfElements();
}
*/</doc>
