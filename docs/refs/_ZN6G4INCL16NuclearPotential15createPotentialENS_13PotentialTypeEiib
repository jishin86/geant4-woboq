<dec f='codebrowser/source/processes/hadronic/models/inclxx/incl_physics/include/G4INCLINuclearPotential.hh' l='291' type='const G4INCL::NuclearPotential::INuclearPotential * G4INCL::NuclearPotential::createPotential(const G4INCL::PotentialType type, const G4int theA, const G4int theZ, const G4bool pionPotential)'/>
<doc f='codebrowser/source/processes/hadronic/models/inclxx/incl_physics/include/G4INCLINuclearPotential.hh' l='279'>/** \brief Create an INuclearPotential object
     *
     * This is the method that should be used to instantiate objects derived
     * from INuclearPotential. It uses a caching mechanism to minimise
     * thrashing and speed up the code.
     *
     * \param type the type of the potential to be created
     * \param theA mass number of the nucleus
     * \param theZ charge number of the nucleus
     * \param pionPotential whether pions should also feel the potential
     * \return a pointer to the nuclear potential
     */</doc>
<def f='codebrowser/source/processes/hadronic/models/inclxx/incl_physics/src/G4INCLINuclearPotential.cc' l='70' ll='100' type='const G4INCL::NuclearPotential::INuclearPotential * G4INCL::NuclearPotential::createPotential(const G4INCL::PotentialType type, const G4int theA, const G4int theZ, const G4bool pionPotential)'/>
<use f='codebrowser/source/processes/hadronic/models/inclxx/incl_physics/src/G4INCLNucleus.cc' l='97' u='c' c='_ZN6G4INCL7NucleusC1EiiiPKNS_6ConfigEd'/>
