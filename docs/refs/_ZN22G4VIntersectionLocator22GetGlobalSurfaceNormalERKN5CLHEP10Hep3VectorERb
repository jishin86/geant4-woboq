<dec f='codebrowser/source/geometry/navigation/include/G4VIntersectionLocator.hh' l='168' type='G4ThreeVector G4VIntersectionLocator::GetGlobalSurfaceNormal(const G4ThreeVector &amp; CurrentE_Point, G4bool &amp; validNormal)'/>
<doc f='codebrowser/source/geometry/navigation/include/G4VIntersectionLocator.hh' l='158'>// Position *must* be the intersection point from last call
      // to G4Navigator&apos;s ComputeStep  (via IntersectChord )
      // Will try to use cached (last) value in Navigator for speed, 
      // if it was kept and valid.
      // Value returned is in global coordinates.
      // It does NOT guarantee to obtain Normal. This can happen eg if:
      //  - the &quot;Intersection&quot; Point is not on a surface, potentially due to
      //  - inaccuracies in the transformations used, or
      //  - issues with the Solid.</doc>
<use f='codebrowser/source/geometry/navigation/src/G4VIntersectionLocator.cc' l='457' u='c' c='_ZN22G4VIntersectionLocator29AdjustmentOfFoundIntersectionERKN5CLHEP10Hep3VectorES3_S3_S3_bRS1_RdS5_S4_'/>
<def f='codebrowser/source/geometry/navigation/src/G4VIntersectionLocator.cc' l='564' ll='599' type='G4ThreeVector G4VIntersectionLocator::GetGlobalSurfaceNormal(const G4ThreeVector &amp; CurrentE_Point, G4bool &amp; validNormal)'/>
<doc f='codebrowser/source/geometry/navigation/src/G4VIntersectionLocator.cc' l='560'>///////////////////////////////////////////////////////////////////////////
//
// GetGlobalSurfaceNormal.
//</doc>
