<dec f='codebrowser/source/geometry/solids/specific/include/G4PolyhedraSide.hh' l='114' type='G4bool G4PolyhedraSide::Intersect(const G4ThreeVector &amp; p, const G4ThreeVector &amp; v, G4bool outgoing, G4double surfTolerance, G4double &amp; distance, G4double &amp; distFromSurface, G4ThreeVector &amp; normal, G4bool &amp; allBehind)'/>
<inh f='codebrowser/source/geometry/solids/specific/include/G4VCSGface.hh' l='279' c='_ZN10G4VCSGface9IntersectERKN5CLHEP10Hep3VectorES3_bdRdS4_RS1_Rb'/>
<def f='codebrowser/source/geometry/solids/specific/src/G4PolyhedraSide.cc' l='465' ll='581' type='G4bool G4PolyhedraSide::Intersect(const G4ThreeVector &amp; p, const G4ThreeVector &amp; v, G4bool outgoing, G4double surfTolerance, G4double &amp; distance, G4double &amp; distFromSurface, G4ThreeVector &amp; normal, G4bool &amp; isAllBehind)'/>
<doc f='codebrowser/source/geometry/solids/specific/src/G4PolyhedraSide.cc' l='424'>//
// Intersect
//
// Decide if a line intersects the face.
//
// Arguments:
//  p    = (in) starting point of line segment
//  v    = (in) direction of line segment (assumed a unit vector)
//  A, B    = (in) 2d transform variables (see note top of file)
//  normSign  = (in) desired sign for dot product with normal (see below)
//  surfTolerance  = (in) minimum distance from the surface
//  vecs    = (in) Vector set array
//  distance  = (out) distance to surface furfilling all requirements
//  distFromSurface = (out) distance from the surface
//  thisNormal  = (out) normal vector of the intersecting surface
//
// Return value:
//  true if an intersection is found. Otherwise, output parameters are
//  undefined.
//
// Notes:
// * normSign: if we are &quot;inside&quot; the shape and only want to find out how far
//   to leave the shape, we only want to consider intersections with surfaces in
//   which the trajectory is leaving the shape. Since the normal vectors to the
//   surface always point outwards from the inside, this means we want the dot
//   product of the trajectory direction v and the normal of the side normals[i]
//   to be positive. Thus, we should specify normSign as +1.0. Otherwise, if
//   we are outside and want to go in, normSign should be set to -1.0.
//   Don&apos;t set normSign to zero, or you will get no intersections!
//
// * surfTolerance: see notes on argument &quot;surfTolerance&quot; in routine
//   &quot;IntersectSidePlane&quot;.
//   ----HOWEVER---- We should *not* apply this surface tolerance if the
//   starting point is not within phi or z of the surface. Specifically,
//   if the starting point p angle in x/y places it on a separate side from the
//   intersection or if the starting point p is outside the z bounds of the
//   segment, surfTolerance must be ignored or we should *always* accept the
//   intersection! 
//   This is simply because the sides do not have infinite extent.
//      
//</doc>
