<dec f='codebrowser/source/analysis/g4tools/include/tools/hatcher' l='193' type='tools::vec2f tools::hatcher::resolve_system(const tools::vec3f &amp; A, const tools::vec3f &amp; B, const tools::vec3f &amp; C)'/>
<use f='codebrowser/source/analysis/g4tools/include/tools/hatcher.icc' l='58' u='c' c='_ZN5tools7hatcher14check_polylineEPNS_5vec3fEj'/>
<use f='codebrowser/source/analysis/g4tools/include/tools/hatcher.icc' l='573' u='c' c='_ZN5tools7hatcher23compute_single_polylineEPNS_5vec3fEj'/>
<def f='codebrowser/source/analysis/g4tools/include/tools/hatcher.icc' l='1153' ll='1259' type='tools::vec2f tools::hatcher::resolve_system(const tools::vec3f &amp; A, const tools::vec3f &amp; B, const tools::vec3f &amp; C)'/>
<doc f='codebrowser/source/analysis/g4tools/include/tools/hatcher' l='183'>/**
  * Compute a vector system equation aA+bB=C
  * return SbVec2f(0,0) if there is an error
  * set the resolveResult variable to the error code :
  * COLINEAR if A and B are 
  * PRECISION_ERROR if there is a lack of precision in computing
  * Z_ERROR if there s no solution for Z
  * UNDEFINED never throw
  * return a SbVec2f  for result. a is &apos;x&apos; value and b is &apos;y&apos; if it is correct
  */</doc>
<doc f='codebrowser/source/analysis/g4tools/include/tools/hatcher.icc' l='1142'>//////////////////////////////////////////////////////////////////////////////
// Compute a vector system equation aA+bB=C
// return vec2f(0,0) if there is an error
// set the resolveResult variable to the error code :
// COLINEAR if A and B are 
// PRECISION_ERROR if there is a lack of precision in computing
// Z_ERROR if there s no solution for Z
// UNDEFINED never throw
// return a vec2f  for result. a is &apos;x&apos; value and b is &apos;y&apos; if it is correct
//////////////////////////////////////////////////////////////////////////////</doc>
