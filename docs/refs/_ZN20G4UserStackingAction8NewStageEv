<dec f='codebrowser/source/event/include/G4UserStackingAction.hh' l='83' type='void G4UserStackingAction::NewStage()'/>
<doc f='codebrowser/source/event/include/G4UserStackingAction.hh' l='61'>//
//    Reply G4ClassificationOfNewTrack determined by the
//  newly coming G4Track.
//
//    enum G4ClassificationOfNewTrack
//    {
//      fUrgent,    // put into the urgent stack
//      fWaiting,   // put into the waiting stack
//      fPostpone,  // postpone to the next event
//      fKill       // kill without stacking
//    };
//
//    The parent_ID of the track indicates the origin of it.
//                
//    G4int parent_ID = aTrack-&gt;get_parentID();
//   
//      parent_ID = 0 : primary particle
//                &gt; 0 : secondary particle
//                &lt; 0 : postponed from the previous event
//
//---------------------------------------------------------------
//</doc>
<ovr f='codebrowser/source/event/src/G4AdjointStackingAction.cc' l='75' c='_ZN23G4AdjointStackingAction8NewStageEv'/>
<use f='codebrowser/source/event/src/G4AdjointStackingAction.cc' l='78' u='c' c='_ZN23G4AdjointStackingAction8NewStageEv'/>
<use f='codebrowser/source/event/src/G4AdjointStackingAction.cc' l='81' u='c' c='_ZN23G4AdjointStackingAction8NewStageEv'/>
<ovr f='codebrowser/source/event/include/G4StackChecker.hh' l='54' c='_ZN14G4StackChecker8NewStageEv'/>
<use f='codebrowser/source/event/src/G4StackManager.cc' l='190' u='c' c='_ZN14G4StackManager12PopNextTrackEPP13G4VTrajectory'/>
<def f='codebrowser/source/event/src/G4UserStackingAction.cc' l='62' ll='63' type='void G4UserStackingAction::NewStage()'/>
