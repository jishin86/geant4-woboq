<dec f='codebrowser/source/processes/hadronic/models/parton_string/hadronization/include/G4VLongitudinalStringDecay.hh' l='100' type='G4ExcitedString * G4VLongitudinalStringDecay::CopyExcited(const G4ExcitedString &amp; string)'/>
<doc f='codebrowser/source/processes/hadronic/models/parton_string/hadronization/include/G4VLongitudinalStringDecay.hh' l='97'>// If a string fragments, do the following

    // To make a copy of a string</doc>
<use f='codebrowser/source/processes/hadronic/models/parton_string/hadronization/src/G4QGSMFragmentation.cc' l='113' u='c' c='_ZN19G4QGSMFragmentation14FragmentStringERK15G4ExcitedString'/>
<def f='codebrowser/source/processes/hadronic/models/parton_string/hadronization/src/G4VLongitudinalStringDecay.cc' l='276' ll='281' type='G4ExcitedString * G4VLongitudinalStringDecay::CopyExcited(const G4ExcitedString &amp; in)'/>
<doc f='codebrowser/source/processes/hadronic/models/parton_string/hadronization/src/G4VLongitudinalStringDecay.cc' l='260'>//*********************************************************************************
//   For decision on continue or stop string fragmentation
//   virtual G4bool StopFragmenting(const G4FragmentingString  * const string)=0;
//   virtual G4bool IsFragmentable(const G4FragmentingString * const string)=0;

//   If a string can not fragment, make last break into 2 hadrons
//   virtual G4bool SplitLast(G4FragmentingString * string, 
//                            G4KineticTrackVector * LeftVector,
//                            G4KineticTrackVector * RightVector)=0;
//-----------------------------------------------------------------------------
//
//   If a string can fragment, do the following
//
//   For transver of a string to its CMS frame
//-----------------------------------------------------------------------------</doc>
