<dec f='codebrowser/source/externals/clhep/include/CLHEP/Random/RandPoissonQ.h' l='74' type='static long CLHEP::RandPoissonQ::shoot(double m = 1.)'/>
<doc f='codebrowser/source/externals/clhep/include/CLHEP/Random/RandPoissonQ.h' l='54'>// Methods to generate Poisson-distributed random deviates.

  //   The method used for mu &lt;= 100 is exact, and 3-7 times faster than
  //   that used by RandPoisson.  
  //   For mu &gt; 100 then we use a corrected version of a 
  //   (quick) Gaussian approximation.  Naively that would be:
  //
  //	Poisson(mu) ~ floor( mu + .5 + Gaussian(sqrt(mu)) )
  //
  //   but actually, that would give a slightly incorrect sigma and a 
  //   very different skew than a true Poisson.  Instead we return 
  // 
  //	Poisson(mu) ~ floor( a0*mu + a1*g + a2*g*g ) )
  //						(with g a gaussian normal)
  //
  //   where a0, a1, a2 are chosen to give the exctly correct mean, sigma,
  //   and skew for the Poisson distribution.

  // Static methods to shoot random values using the static generator</doc>
<def f='codebrowser/source/externals/clhep/src/RandPoissonQ.cc' l='116' ll='118' type='static long CLHEP::RandPoissonQ::shoot(double xm = 1.)'/>
<use f='codebrowser/source/externals/clhep/src/RandPoissonQ.cc' l='173' u='c' c='_ZN5CLHEP12RandPoissonQ10shootArrayEiPld'/>
<doc f='codebrowser/source/externals/clhep/src/RandPoissonQ.cc' l='112'>//
// fire, quick, operator(), and shoot methods:
//</doc>
