<dec f='codebrowser/source/processes/electromagnetic/dna/management/include/G4ITNavigator2.hh' l='131' type='G4double G4ITNavigator::ComputeStep(const G4ThreeVector &amp; pGlobalPoint, const G4ThreeVector &amp; pDirection, const G4double pCurrentProposedStepLength, G4double &amp; pNewSafety)'/>
<doc f='codebrowser/source/processes/electromagnetic/dna/management/include/G4ITNavigator2.hh' l='129'>// &lt;!</doc>
<ovr f='codebrowser/source/processes/electromagnetic/dna/management/src/G4ITMultiNavigator.cc' l='95' c='_ZN18G4ITMultiNavigator11ComputeStepERKN5CLHEP10Hep3VectorES3_dRd'/>
<def f='codebrowser/source/processes/electromagnetic/dna/management/src/G4ITNavigator2.cc' l='909' ll='1348' type='G4double G4ITNavigator::ComputeStep(const G4ThreeVector &amp; pGlobalpoint, const G4ThreeVector &amp; pDirection, const G4double pCurrentProposedStepLength, G4double &amp; pNewSafety)'/>
<use f='codebrowser/source/processes/electromagnetic/dna/management/src/G4ITNavigator2.cc' l='1370' u='c' c='_ZN13G4ITNavigator13CheckNextStepERKN5CLHEP10Hep3VectorES3_dRd'/>
<doc f='codebrowser/source/processes/electromagnetic/dna/management/src/G4ITNavigator2.cc' l='847'>/*
void G4ITNavigator2::RestoreSavedState()
{
  fExitNormal = fpSaveState-&gt;sExitNormal;
  fValidExitNormal = fpSaveState-&gt;sValidExitNormal;
  fExiting = fpSaveState-&gt;sExiting;
  fEntering = fpSaveState-&gt;sEntering;

  fBlockedPhysicalVolume = fpSaveState-&gt;spBlockedPhysicalVolume;
  fBlockedReplicaNo = fpSaveState-&gt;sBlockedReplicaNo,

  fLastStepWasZero = fpSaveState-&gt;sLastStepWasZero;

  // !&gt;
  fPreviousSftOrigin = fpSaveState-&gt;sPreviousSftOrigin ;
  fPreviousSafety = fpSaveState-&gt;sPreviousSafety ;
  fNumberZeroSteps = fpSaveState-&gt;sNumberZeroSteps ;
  fLocatedOnEdge = fpSaveState-&gt;sLocatedOnEdge ;
  fWasLimitedByGeometry = fpSaveState-&gt;sWasLimitedByGeometry;
  fPushed = fpSaveState-&gt;sPushed;
  fNumberZeroSteps = fpSaveState-&gt;sNumberZeroSteps;
  fEnteredDaughter= fpSaveState-&gt;sEnteredDaughter ;
  fExitedMother = fpSaveState-&gt;sExitedMother ;

  fLastLocatedPointLocal = fpSaveState-&gt;sLastLocatedPointLocal ;
  fLocatedOutsideWorld = fpSaveState-&gt;sLocatedOutsideWorld;
  // &lt;!
}
*/
// &lt;!

// ********************************************************************
// ComputeStep
//
// Computes the next geometric Step: intersections with current
// mother and `daughter&apos; volumes.
//
// NOTE:
//
// Flags on entry:
// --------------
// fValidExitNormal  - Normal of exited volume is valid (convex, not a 
//                     coincident boundary)
// fExitNormal       - Surface normal of exited volume
// fExiting          - True if have exited solid
//
// fBlockedPhysicalVolume - Ptr to exited volume (or 0)
// fBlockedReplicaNo - Replication no of exited volume
// fLastStepWasZero  - True if last Step size was zero.
//
// Flags on exit:
// -------------
// fValidExitNormal  - True if surface normal of exited volume is valid
// fExitNormal       - Surface normal of exited volume rotated to mothers
//                    reference system
// fExiting          - True if exiting mother
// fEntering         - True if entering `daughter&apos; volume (or replica)
// fBlockedPhysicalVolume - Ptr to candidate (entered) volume
// fBlockedReplicaNo - Replication no of candidate (entered) volume
// fLastStepWasZero  - True if this Step size was zero.
// ********************************************************************
//</doc>
