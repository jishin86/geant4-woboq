<dec f='codebrowser/source/geometry/volumes/include/G4AssemblyVolume.hh' l='112' type='void G4AssemblyVolume::AddPlacedVolume(G4LogicalVolume * pPlacedVolume, G4Transform3D &amp; transformation)'/>
<doc f='codebrowser/source/geometry/volumes/include/G4AssemblyVolume.hh' l='83'>//
    // Place the given volume &apos;pPlacedVolume&apos; inside the assembly.
    //
    // The adopted approach:
    //
    // - Place it w.r.t. the assembly coordinate system.
    //   This step is applied to each of the participating volumes.
    //
    // The other possible approaches:
    //
    // - Place w.r.t. the firstly added volume.
    //   When placed the first, the virtual coordinate system becomes
    //   the coordinate system of the first one.
    //   Every next volume being added into the assembly will be placed
    //   w.r.t to the first one.
    //
    // - Place w.r.t the last placed volume.
    //   When placed the first, the virtual coordinate system becomes
    //   the coordinate system of the first one.
    //   Every next volume being added into the assembly will be placed
    //   w.r.t to the previous one.
    //
    // The rotation matrix passed as argument can be 0 (identity) or an address
    // even of an object on the upper stack frame. During assembly imprint, a
    // new matrix is created anyway and it is kept track of it so it can be
    // automatically deleted later at the end of the application.
    // This policy is adopted since user has no control on the way the
    // rotations are combined.</doc>
<def f='codebrowser/source/geometry/volumes/src/G4AssemblyVolume.cc' l='147' ll='165' type='void G4AssemblyVolume::AddPlacedVolume(G4LogicalVolume * pVolume, G4Transform3D &amp; transformation)'/>
<doc f='codebrowser/source/geometry/volumes/src/G4AssemblyVolume.cc' l='145'>// Add and place the given volume according to the specified transformation
//</doc>
