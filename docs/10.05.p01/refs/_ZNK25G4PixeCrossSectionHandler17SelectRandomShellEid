<dec f='codebrowser/source/processes/electromagnetic/pii/include/G4PixeCrossSectionHandler.hh' l='91' type='G4int G4PixeCrossSectionHandler::SelectRandomShell(G4int Z, G4double e) const'/>
<def f='codebrowser/source/processes/electromagnetic/pii/src/G4PixeCrossSectionHandler.cc' l='537' ll='573' type='G4int G4PixeCrossSectionHandler::SelectRandomShell(G4int Z, G4double e) const'/>
<doc f='codebrowser/source/processes/electromagnetic/pii/src/G4PixeCrossSectionHandler.cc' l='488'>/*
  const G4Element* G4PixeCrossSectionHandler::SelectRandomElement(const G4MaterialCutsCouple* couple,
  G4double e) const
  {
  // Select randomly an element within the material, according to the weight determined
  // by the cross sections in the data set

  const G4Material* material = couple-&gt;GetMaterial();
  G4Element* nullElement = 0;
  G4int nElements = material-&gt;GetNumberOfElements();
  const G4ElementVector* elementVector = material-&gt;GetElementVector();

  // Special case: the material consists of one element
  if (nElements == 1)
  {
  G4Element* element = (*elementVector)[0];
  return element;
  }
  else
  {
  // Composite material

  size_t materialIndex = couple-&gt;GetIndex();

  G4IDataSet* materialSet = (*crossSections)[materialIndex];
  G4double materialCrossSection0 = 0.0;
  G4DataVector cross;
  cross.clear();
  for (G4int i=0; i&lt;nElements; i++)
  {
  G4double cr = materialSet-&gt;GetComponent(i)-&gt;FindValue(e);
  materialCrossSection0 += cr;
  cross.push_back(materialCrossSection0);
  }

  G4double random = G4UniformRand() * materialCrossSection0;

  for (G4int k=0 ; k &lt; nElements ; k++ )
  {
  if (random &lt;= cross[k]) return (*elementVector)[k];
  }
  // It should never end up here
  G4cout &lt;&lt; &quot;G4PixeCrossSectionHandler::SelectRandomElement - no element found&quot; &lt;&lt; G4endl;
  return nullElement;
  }
  }
*/</doc>
<use f='codebrowser/source/processes/electromagnetic/pii/src/G4hImpactIonisation.cc' l='1090' u='c' c='_ZN19G4hImpactIonisation12PostStepDoItERK7G4TrackRK6G4Step'/>
