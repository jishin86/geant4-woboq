<def f='codebrowser/source/analysis/g4tools/include/tools/glutess/mesh' l='82' ll='92'/>
<size>80</size>
<doc f='codebrowser/source/analysis/g4tools/include/tools/glutess/mesh' l='16'>/* The mesh structure is similar in spirit, notation, and operations
 * to the &quot;quad-edge&quot; structure (see L. Guibas and J. Stolfi, Primitives
 * for the manipulation of general subdivisions and the computation of
 * Voronoi diagrams, ACM Transactions on Graphics, 4(2):74-123, April 1985).
 * For a simplified description, see the course notes for CS348a,
 * &quot;Mathematical Foundations of Computer Graphics&quot;, available at the
 * Stanford bookstore (and taught during the fall quarter).
 * The implementation also borrows a tiny subset of the graph-based approach
 * use in Mantyla&apos;s Geometric Work Bench (see M. Mantyla, An Introduction
 * to Sold Modeling, Computer Science Press, Rockville, Maryland, 1988).
 *
 * The fundamental data structure is the &quot;half-edge&quot;.  Two half-edges
 * go together to make an edge, but they point in opposite directions.
 * Each half-edge has a pointer to its mate (the &quot;symmetric&quot; half-edge Sym),
 * its origin vertex (Org), the face on its left side (Lface), and the
 * adjacent half-edges in the CCW direction around the origin vertex
 * (Onext) and around the left face (Lnext).  There is also a &quot;next&quot;
 * pointer for the global edge list (see below).
 *
 * The notation used for mesh navigation:
 *	Sym   = the mate of a half-edge (same edge, but opposite direction)
 *	Onext = edge CCW around origin vertex (keep same origin)
 *	Dnext = edge CCW around destination vertex (keep same dest)
 *	Lnext = edge CCW around left face (dest becomes new origin)
 *	Rnext = edge CCW around right face (origin becomes new dest)
 *
 * &quot;prev&quot; means to substitute CW for CCW in the definitions above.
 *
 * The mesh keeps global lists of all vertices, faces, and edges,
 * stored as doubly-linked circular lists with a dummy header node.
 * The mesh stores pointers to these dummy headers (vHead, fHead, eHead).
 *
 * The circular edge list is special; since half-edges always occur
 * in pairs (e and e-&gt;Sym), each half-edge stores a pointer in only
 * one direction.  Starting at eHead and following the e-&gt;next pointers
 * will visit each *edge* once (ie. e or e-&gt;Sym, but not both).
 * e-&gt;Sym stores a pointer in the opposite direction, thus it is
 * always true that e-&gt;Sym-&gt;next-&gt;Sym-&gt;next == e.
 *
 * Each vertex has a pointer to next and previous vertices in the
 * circular list, and a pointer to a half-edge with this vertex as
 * the origin (NULL if this is the dummy header).  There is also a
 * field &quot;data&quot; for client data.
 *
 * Each face has a pointer to the next and previous faces in the
 * circular list, and a pointer to a half-edge with this face as
 * the left face (NULL if this is the dummy header).  There is also
 * a field &quot;data&quot; for client data.
 *
 * Note that what we call a &quot;face&quot; is really a loop; faces may consist
 * of more than one loop (ie. not simply connected), but there is no
 * record of this in the data structure.  The mesh may consist of
 * several disconnected regions, so it may not be possible to visit
 * the entire mesh by starting at a half-edge and traversing the edge
 * structure.
 *
 * The mesh does NOT support isolated vertices; a vertex is deleted along
 * with its last edge.  Similarly when two faces are merged, one of the
 * faces is deleted (see __gl_meshDelete below).  For mesh operations,
 * all face (loop) and vertex pointers must not be NULL.  However, once
 * mesh manipulation is finished, __gl_MeshZapFace can be used to delete
 * faces of the mesh, one at a time.  All external faces can be &quot;zapped&quot;
 * before the mesh is returned to the client; then a NULL face indicates
 * a region which is not part of the output polygon.
 */</doc>
<mbr r='GLUvertex::next' o='0' t='GLUvertex *'/>
<mbr r='GLUvertex::prev' o='64' t='GLUvertex *'/>
<mbr r='GLUvertex::anEdge' o='128' t='GLUhalfEdge *'/>
<mbr r='GLUvertex::data' o='192' t='void *'/>
<mbr r='GLUvertex::coords' o='256' t='GLUdouble [3]'/>
<mbr r='GLUvertex::s' o='448' t='GLUdouble'/>
<mbr r='GLUvertex::t' o='512' t='GLUdouble'/>
<mbr r='GLUvertex::pqHandle' o='576' t='long'/>
