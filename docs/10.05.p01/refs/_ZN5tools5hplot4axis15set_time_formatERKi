<def f='codebrowser/source/analysis/g4tools/include/tools/hplot' l='1764' ll='1816' type='void tools::hplot::axis::set_time_format(const int &amp; a_format)'/>
<doc f='codebrowser/source/analysis/g4tools/include/tools/hplot' l='1710'>/*
  void TGaxis_SetDecimals(bool dot)
  {
  // Set the Decimals flag
  // By default, blank characters are stripped, and then the
  // label is correctly aligned. The dot, if last character of the string,
  // is also stripped, unless this option is specified.
  // One can disable the option by calling axis.SetDecimals(true).
  // Note the bit is set in fBits (as opposed to fBits2 in TAxis!)
  
     if (dot) SetBit(TAxis_kDecimals);
     else     ResetBit(TAxis_kDecimals);
  }
  
  void TGaxis_SetMaxDigits(int maxd)
  {
     // static function to set fMaxDigits for axis with the bin content
     // (y axis for 1-d histogram, z axis for 2-d histogram)
     //fMaxDigits is the maximum number of digits permitted for the axis
     //labels above which the notation with 10^N is used.
     //For example, to accept 6 digits number like 900000 on an axis
     //call TGaxis::SetMaxDigits(6). The default value is 5.
     //fMaxDigits must be greater than 0.
  
     fMaxDigits = maxd;
     if (maxd &lt; 1) fMaxDigits = 1;
  }
  
  void TGaxis_SetMoreLogLabels(bool more)
  {
  // Set the kMoreLogLabels bit flag
  // When this option is selected more labels are drawn when in log scale
  // and there is a small number of decades  (&lt;3).
  // Note that this option is automatically inherited from TAxis
  
     if (more) SetBit(TAxis_kMoreLogLabels);
     else      ResetBit(TAxis_kMoreLogLabels);
  }
  void TGaxis_SetNoExponent(bool noExponent)
  {
  // Set the NoExponent flag
  // By default, an exponent of the form 10^N is used when the label values
  // are either all very small or very large.
  // One can disable the exponent by calling axis.SetNoExponent(true).
  
     if (noExponent) SetBit(TAxis_kNoExponent);
     else            ResetBit(TAxis_kNoExponent);
  }
  void TGaxis_SetOption(const std::string&amp; option)  
  {
     fCHOPT = option;
  }
  */</doc>
