<dec f='codebrowser/source/geometry/magneticfield/include/G4DormandPrinceRK78.hh' l='60' type='void G4DormandPrinceRK78::Stepper(const G4double * y, const G4double * dydx, G4double h, G4double * yout, G4double * yerr)'/>
<inh f='codebrowser/source/geometry/magneticfield/include/G4MagIntegratorStepper.hh' l='64' c='_ZN22G4MagIntegratorStepper7StepperEPKdS1_dPdS2_'/>
<def f='codebrowser/source/geometry/magneticfield/src/G4DormandPrinceRK78.cc' l='134' ll='413' type='void G4DormandPrinceRK78::Stepper(const G4double * yInput, const G4double * dydx, G4double Step, G4double * yOut, G4double * yErr)'/>
<use f='codebrowser/source/geometry/magneticfield/src/G4DormandPrinceRK78.cc' l='431' u='c' c='_ZNK19G4DormandPrinceRK789DistChordEv'/>
<doc f='codebrowser/source/geometry/magneticfield/src/G4DormandPrinceRK78.cc' l='122'>//	The following scheme and the set of coefficients have been obtained from
//Table2. RK8(7)13M (Rational approximations
//---Ref---
//	P. J. Prince and J. R. Dormand, “High order embedded Runge-Kutta formulae,”
//	Journal of Computational and Applied Mathematics,
//	vol. 7, no. 1, pp. 67–75, Dec. 1980.
//------------------------------
//Stepper :

// Passing in the value of yInput[],the first time dydx[] and Step length
// Giving back yOut and yErr arrays for output and error respectively</doc>
