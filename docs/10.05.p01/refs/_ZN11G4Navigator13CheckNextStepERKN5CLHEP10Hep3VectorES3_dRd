<dec f='codebrowser/source/geometry/navigation/include/G4Navigator.hh' l='101' type='G4double G4Navigator::CheckNextStep(const G4ThreeVector &amp; pGlobalPoint, const G4ThreeVector &amp; pDirection, const G4double pCurrentProposedStepLength, G4double &amp; pNewSafety)'/>
<doc f='codebrowser/source/geometry/navigation/include/G4Navigator.hh' l='88'>// Calculate the distance to the next boundary intersected
    // along the specified NORMALISED vector direction and
    // from the specified point in the global coordinate
    // system. LocateGlobalPointAndSetup or LocateGlobalPointWithinVolume 
    // must have been called with the same global point prior to this call.
    // The isotropic distance to the nearest boundary is also
    // calculated (usually an underestimate). The current
    // proposed Step length is used to avoid intersection
    // calculations: if it can be determined that the nearest
    // boundary is &gt;pCurrentProposedStepLength away, kInfinity
    // is returned together with the computed isotropic safety
    // distance. Geometry must be closed.</doc>
<def f='codebrowser/source/geometry/navigation/src/G4Navigator.cc' l='1201' ll='1226' type='G4double G4Navigator::CheckNextStep(const G4ThreeVector &amp; pGlobalpoint, const G4ThreeVector &amp; pDirection, const G4double pCurrentProposedStepLength, G4double &amp; pNewSafety)'/>
<doc f='codebrowser/source/geometry/navigation/src/G4Navigator.cc' l='1195'>// ********************************************************************
// CheckNextStep
//
// Compute the step without altering the navigator state
// ********************************************************************
//</doc>
<use f='codebrowser/source/geometry/navigation/src/G4SafetyHelper.cc' l='100' u='c' c='_ZN14G4SafetyHelper13CheckNextStepERKN5CLHEP10Hep3VectorES3_dRd'/>
