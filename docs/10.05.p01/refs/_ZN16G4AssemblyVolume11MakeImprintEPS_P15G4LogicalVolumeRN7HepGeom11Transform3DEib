<dec f='codebrowser/source/geometry/volumes/include/G4AssemblyVolume.hh' l='181' type='void G4AssemblyVolume::MakeImprint(G4AssemblyVolume * pAssembly, G4LogicalVolume * pMotherLV, G4Transform3D &amp; transformation, G4int copyNumBase = 0, G4bool surfCheck = false)'/>
<def f='codebrowser/source/geometry/volumes/src/G4AssemblyVolume.cc' l='244' ll='332' type='void G4AssemblyVolume::MakeImprint(G4AssemblyVolume * pAssembly, G4LogicalVolume * pMotherLV, G4Transform3D &amp; transformation, G4int copyNumBase = 0, G4bool surfCheck = false)'/>
<use f='codebrowser/source/geometry/volumes/src/G4AssemblyVolume.cc' l='358' u='c' c='_ZN16G4AssemblyVolume11MakeImprintEP15G4LogicalVolumeRN5CLHEP10Hep3VectorEPNS2_11HepRotationEib'/>
<use f='codebrowser/source/geometry/volumes/src/G4AssemblyVolume.cc' l='372' u='c' c='_ZN16G4AssemblyVolume11MakeImprintEP15G4LogicalVolumeRN7HepGeom11Transform3DEib'/>
<doc f='codebrowser/source/geometry/volumes/src/G4AssemblyVolume.cc' l='206'>// Create an instance of an assembly volume inside of the specified
// mother volume. This works analogically to making stamp imprints.
// This method makes use of the Geant4 affine transformation class.
// The algorithm is defined as follows:
//  
// Having rotation matrix Rm and translation vector Tm to be applied
// inside the mother and rotation matrix Ra and translation vector Ta
// to be applied inside the assembly itself for each of the participating
// volumes the resulting transformation is
//  
// Tfinal = Ta * Tm
//  
// where Ta and Tm are constructed as
//  
//        -1                                     -1
// Ta = Ra  * Ta           and            Tm = Rm  * Tm
//  
// which in words means that we create first the affine transformations
// by inverse rotation matrices and translations for mother and assembly.
// The resulting final transformation to be applied to each of the
// participating volumes is their product.
//
// IMPORTANT NOTE!
// The order of multiplication is reversed when comparing to CLHEP 3D
// transformation matrix(G4Transform3D class).
//  
// The rotation matrix passed in can be 0 = identity or an address even of an
// object on the upper stack frame. During assembly imprint, it creates anyway
// a new matrix and keeps track of it so it can delete it later at destruction
// time.
// This policy has been adopted since user has no control on the way the
// rotations are combined.
// 
// If the assembly volume contains assembly (a&apos;), the function is called
// recursively with composed transformation:
//
// Tanew =  Ta * Ta&apos;
//</doc>
