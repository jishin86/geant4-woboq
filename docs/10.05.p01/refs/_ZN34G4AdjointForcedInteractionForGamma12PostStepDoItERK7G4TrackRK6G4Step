<dec f='codebrowser/source/processes/electromagnetic/adjoint/include/G4AdjointForcedInteractionForGamma.hh' l='88' type='G4VParticleChange * G4AdjointForcedInteractionForGamma::PostStepDoIt(const G4Track &amp; , const G4Step &amp; )'/>
<inh f='codebrowser/source/processes/management/include/G4VContinuousDiscreteProcess.hh' l='73' c='_ZN28G4VContinuousDiscreteProcess12PostStepDoItERK7G4TrackRK6G4Step'/>
<def f='codebrowser/source/processes/electromagnetic/adjoint/src/G4AdjointForcedInteractionForGamma.cc' l='97' ll='153' type='G4VParticleChange * G4AdjointForcedInteractionForGamma::PostStepDoIt(const G4Track &amp; track, const G4Step &amp; )'/>
<doc f='codebrowser/source/processes/electromagnetic/adjoint/src/G4AdjointForcedInteractionForGamma.cc' l='79'>//Note on weight correction for forced interaction
//For the forced interaction applied here we do use a truncated exponential law for the probability of survival
//over a fixed total length. This is done by using a linear transformation of the non biased probability survival
//In mathematic this writes
//P&apos;(x)=C1P(x)+C2
//With P(x)=exp(-sum(sigma_ixi))  x and L can cross different volumes with different cross section sigma.
//For forced interaction  we get the following limit conditions
//P&apos;(L)=0 P&apos;(0)=1       (L can be used over different volumes)
//From simple solving of linear equation we get
//C1=1/(1-P(L)) et C2=-P(L)/(1-P(L))
//P&apos;(x)=(P(x)-P(L))/(1-P(L))
//For the probability  over a step x1 to x2
//P&apos;(x1-&gt;x2)=P&apos;(x2)/P&apos;(x1)
//The effective cross section is defined -d(P&apos;(x))/dx/P&apos;(x)
//We get therefore
//sigma_eff=C1sigmaP(x)/(C1P(x)+C2)=sigmaP(x)/(P(x)+C2/C1)=sigmaP(x)/(P(x)-P(L))=sigma/(1-P(L)/P(x))
//////////////////////////////////////////////////////////////////////////////
//</doc>
