<dec f='codebrowser/source/geometry/volumes/include/G4AssemblyVolume.hh' l='80' type='void G4AssemblyVolume::AddPlacedVolume(G4LogicalVolume * pPlacedVolume, G4ThreeVector &amp; translation, G4RotationMatrix * rotation)'/>
<doc f='codebrowser/source/geometry/volumes/include/G4AssemblyVolume.hh' l='68'>//
    // Constructors &amp; destructor.
    // At destruction all the generated physical volumes and associated
    // rotation matrices of the imprints will be destroyed.
    //
    // The rotation matrix passed as argument can be 0 (identity) or an address
    // even of an object on the upper stack frame. During assembly imprint, a
    // new matrix is created anyway and it is kept track of it so it can be
    // automatically deleted later at the end of the application.
    // This policy is adopted since user has no control on the way the
    // rotations are combined.</doc>
<use f='codebrowser/source/geometry/volumes/src/G4AssemblyVolume.cc' l='80' u='c' c='_ZN16G4AssemblyVolumeC1EP15G4LogicalVolumeRN5CLHEP10Hep3VectorEPNS2_11HepRotationE'/>
<def f='codebrowser/source/geometry/volumes/src/G4AssemblyVolume.cc' l='133' ll='143' type='void G4AssemblyVolume::AddPlacedVolume(G4LogicalVolume * pVolume, G4ThreeVector &amp; translation, G4RotationMatrix * pRotation)'/>
<doc f='codebrowser/source/geometry/volumes/src/G4AssemblyVolume.cc' l='123'>// Add and place the given volume according to the specified
// translation and rotation.
//
// The rotation matrix passed in can be 0 = identity or an address even of an
// object on the upper stack frame. During assembly imprint, it creates anyway
// a new matrix and keeps track of it so it can delete it later at destruction
// time.
// This policy has been adopted since user has no control on the way the
// rotations are combined.
//</doc>
<use f='codebrowser/source/persistency/ascii/src/G4tgbVolume.cc' l='1141' u='c' c='_ZN11G4tgbVolume18ConstructG4PhysVolEPK10G4tgrPlacePK15G4LogicalVolumeS5_'/>
