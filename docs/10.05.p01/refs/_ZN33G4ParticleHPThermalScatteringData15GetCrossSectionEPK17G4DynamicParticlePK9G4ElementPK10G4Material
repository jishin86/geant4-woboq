<dec f='codebrowser/source/processes/hadronic/models/particle_hp/include/G4ParticleHPThermalScatteringData.hh' l='86' type='G4double G4ParticleHPThermalScatteringData::GetCrossSection(const G4DynamicParticle * , const G4Element * , const G4Material * )'/>
<doc f='codebrowser/source/processes/hadronic/models/particle_hp/include/G4ParticleHPThermalScatteringData.hh' l='83'>//G4bool IsZAApplicable( const G4DynamicParticle* , G4double /*ZZ*/, G4double /*AA*/)
      //{ return false;}</doc>
<use f='codebrowser/source/processes/hadronic/models/particle_hp/src/G4ParticleHPThermalScattering.cc' l='442' u='c' c='_ZN29G4ParticleHPThermalScattering13ApplyYourselfERK15G4HadProjectileR9G4Nucleus'/>
<use f='codebrowser/source/processes/hadronic/models/particle_hp/src/G4ParticleHPThermalScatteringData.cc' l='122' u='c' c='_ZN33G4ParticleHPThermalScatteringData18GetIsoCrossSectionEPK17G4DynamicParticleiiPK9G4IsotopePK9G4ElementPK10G4Material'/>
<def f='codebrowser/source/processes/hadronic/models/particle_hp/src/G4ParticleHPThermalScatteringData.cc' l='450' ll='469' type='G4double G4ParticleHPThermalScatteringData::GetCrossSection(const G4DynamicParticle * aP, const G4Element * anE, const G4Material * aM)'/>
<doc f='codebrowser/source/processes/hadronic/models/particle_hp/src/G4ParticleHPThermalScatteringData.cc' l='415'>/*
G4double G4ParticleHPThermalScatteringData::GetCrossSection( const G4DynamicParticle* aP , const G4Element*anE , G4double aT )
{

   G4double result = 0;
   const G4Material* aM = NULL;

   G4int iele = anE-&gt;GetIndex();

   if ( dic.find( std::pair &lt; const G4Material* , const G4Element* &gt; ( (G4Material*)NULL , anE ) ) != dic.end() )
   {
      iele = dic.find( std::pair &lt; const G4Material* , const G4Element* &gt; ( (G4Material*)NULL , anE ) )-&gt;second;
   }
   else if ( dic.find( std::pair &lt; const G4Material* , const G4Element* &gt; ( aM , anE ) ) != dic.end() )
   {
      iele = dic.find( std::pair &lt; const G4Material* , const G4Element* &gt; ( aM , anE ) )-&gt;second;
   }
   else
   {
      return result;
   }

   G4double Xcoh = GetX ( aP , aT , coherent.find(iele)-&gt;second );
   G4double Xincoh = GetX ( aP , aT , incoherent.find(iele)-&gt;second );
   G4double Xinela = GetX ( aP , aT , inelastic.find(iele)-&gt;second );

   result = Xcoh + Xincoh + Xinela;

   //G4cout &lt;&lt; &quot;G4ParticleHPThermalScatteringData::GetCrossSection  Tot= &quot; &lt;&lt; result/barn &lt;&lt; &quot; Coherent= &quot; &lt;&lt; Xcoh/barn &lt;&lt; &quot; Incoherent= &quot; &lt;&lt; Xincoh/barn &lt;&lt; &quot; Inelastic= &quot; &lt;&lt; Xinela/barn &lt;&lt; G4endl;

   return result;

}
*/</doc>
