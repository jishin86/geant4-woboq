<dec f='codebrowser/source/analysis/g4tools/include/tools/hatcher' l='122' type='bool tools::hatcher::compute_polyline(tools::vec3f * listPoints, unsigned int number)'/>
<def f='codebrowser/source/analysis/g4tools/include/tools/hatcher.icc' l='162' ll='515' type='bool tools::hatcher::compute_polyline(tools::vec3f * tabPoints, unsigned int aNumber)'/>
<use f='codebrowser/source/analysis/g4tools/include/tools/sg/plotter' l='6857' u='c' c='_ZN5tools2sg7plotter14rep_hatch1D_xyERKNS0_5styleEi'/>
<use f='codebrowser/source/analysis/g4tools/include/tools/sg/plotter' l='7763' u='c' c='_ZN5tools2sg7plotter13rep_box_hatchERNS0_9separatorEffffffff'/>
<doc f='codebrowser/source/analysis/g4tools/include/tools/hatcher' l='112'>/**
  * draw the hatch into the polyline bounding box given in argument
  * You have to get all compute points by the get_points() method
  * Number of points can be get by number_of_points()
  * The  number of vertices in the return polyline can be get by number_of_vertices()
  * and vertice table by get_vertices
  * @return FALSE if :
  *    - All points are not in the same plan
  *    - There is a precision error on one or more point
  */</doc>
<doc f='codebrowser/source/analysis/g4tools/include/tools/hatcher.icc' l='151'>/** first, we have to match 7 different cases
 * 1- all strip hatch are entirely in the polyline
 * 2- the first strip begin before the polyline and the last end in the polyline
 * 3- the first strip begin before the polyline and the last ends after
 * 4- the first strip is entierly in the polyline and the last ends after
 * 5- the strip has only an intersection with the second hatch sequence (if it has only an intersection
 *    with the first hatch sequence, it is case 2
 * 6- the strip has a full intersection
 * 7- the strip has no intersection !
 */</doc>
