<dec f='codebrowser/source/processes/hadronic/models/inclxx/incl_physics/include/G4INCLCrossSectionsINCL46.hh' l='183' type='G4double G4INCL::CrossSectionsINCL46::elasticNNLegacy(const G4INCL::Particle *const part1, const G4INCL::Particle *const part2)'/>
<doc f='codebrowser/source/processes/hadronic/models/inclxx/incl_physics/include/G4INCLCrossSectionsINCL46.hh' l='182'>/// \brief Internal implementation of the elastic cross section</doc>
<def f='codebrowser/source/processes/hadronic/models/inclxx/incl_physics/src/G4INCLCrossSectionsINCL46.cc' l='92' ll='147' type='G4double G4INCL::CrossSectionsINCL46::elasticNNLegacy(const G4INCL::Particle *const part1, const G4INCL::Particle *const part2)'/>
<use f='codebrowser/source/processes/hadronic/models/inclxx/incl_physics/src/G4INCLCrossSectionsINCL46.cc' l='340' u='c' c='_ZN6G4INCL19CrossSectionsINCL467elasticEPKNS_8ParticleES3_'/>
<doc f='codebrowser/source/processes/hadronic/models/inclxx/incl_physics/src/G4INCLCrossSectionsINCL46.cc' l='46'>/*    G4double elasticNNHighEnergy(const G4double momentum) {
      return 77.0/(momentum + 1.5);
    }

    G4double elasticProtonNeutron(const G4double momentum) {
      if(momentum &lt; 0.450) {
        const G4double alp = std::log(momentum);
        return 6.3555*std::exp(-3.2481*alp-0.377*alp*alp);
      } else if(momentum &gt;= 0.450 &amp;&amp; momentum &lt; 0.8) {
        return (33.0 + 196.0 * std::sqrt(std::pow(std::abs(momentum - 0.95), 5)));
      } else if(momentum &gt; 2.0) {
        return elasticNNHighEnergy(momentum);
      } else {
        return 31.0/std::sqrt(momentum);
      }
    }

    G4double elasticProtonProtonOrNeutronNeutron(const G4double momentum)
    {
      if(momentum &lt; 0.440) {
        return 34.0*std::pow(momentum/0.4, -2.104);
      } else if(momentum &lt; 0.8 &amp;&amp; momentum &gt;= 0.440) {
        return (23.5 + 1000.0*std::pow(momentum-0.7, 4));
      } else if(momentum &lt; 2.0) {
        return (1250.0/(50.0 + momentum) - 4.0*std::pow(momentum-1.3, 2));
      } else {
        return elasticNNHighEnergy(momentum);
      }
    }

    G4double elasticNN(Particle const * const p1, Particle const * const p2) {
      G4double momentum = 0.0;
      momentum = 0.001 * KinematicsUtils::momentumInLab(p1, p2);
      if((p1-&gt;getType() == Proton &amp;&amp; p2-&gt;getType() == Proton) ||
         (p1-&gt;getType() == Neutron &amp;&amp; p2-&gt;getType() == Neutron)) {
        return elasticProtonProtonOrNeutronNeutron(momentum);
      } else if((p1-&gt;getType() == Proton &amp;&amp; p2-&gt;getType() == Neutron) ||
                (p1-&gt;getType() == Neutron &amp;&amp; p2-&gt;getType() == Proton)) {
        return elasticProtonNeutron(momentum);
      } else {
        INCL_ERROR(&quot;CrossSectionsINCL46::elasticNN: Bad input!&quot; &lt;&lt; &apos;\n&apos;
              &lt;&lt; p1-&gt;print() &lt;&lt; p2-&gt;print() &lt;&lt; &apos;\n&apos;);
      }
      return 0.0;
    }:*/</doc>
