<dec f='codebrowser/source/geometry/solids/specific/include/G4IntersectingCone.hh' l='88' type='G4int G4IntersectingCone::LineHitsCone2(const G4ThreeVector &amp; p, const G4ThreeVector &amp; v, G4double * s1, G4double * s2)'/>
<use f='codebrowser/source/geometry/solids/specific/src/G4IntersectingCone.cc' l='135' u='c' c='_ZN18G4IntersectingCone12LineHitsConeERKN5CLHEP10Hep3VectorES3_PdS4_'/>
<def f='codebrowser/source/geometry/solids/specific/src/G4IntersectingCone.cc' l='311' ll='407' type='G4int G4IntersectingCone::LineHitsCone2(const G4ThreeVector &amp; p, const G4ThreeVector &amp; v, G4double * s1, G4double * s2)'/>
<doc f='codebrowser/source/geometry/solids/specific/src/G4IntersectingCone.cc' l='287'>//
// LineHitsCone2
//
// See comments under LineHitsCone1. In this routine, case2, we have:
//
//   Z = A + B*R
//
// The solution is still quadratic:
//
//  a = tz**2 - B*B*(tx**2 + ty**2)
//
//  b = 2*( (z0-A)*tz - B*B*(x0*tx+y0*ty) )
//
//  c = ( (z0-A)**2 - B*B*(x0**2 + y0**2) )
//
// The rest is much the same, except some details.
//
// a &gt; 0 now means we intersect only once in the correct hemisphere.
//
// a &gt; 0 ? We only want solution which produces R &gt; 0.
// since R = (z0+s*tz-A)/B, for tz/B &gt; 0, this is the largest s
//          for tz/B &lt; 0, this is the smallest s
// thus, same as in case 1 ( since sign(tz/B) = sign(tz*B) )
//</doc>
