<inh f='codebrowser/source/run/include/G4VPersistencyManager.hh' l='51' c='G4VPersistencyManager'/>
<def f='codebrowser/source/persistency/mctruth/include/G4PersistencyManager.hh' l='114' ll='190'/>
<size>1</size>
<doc f='codebrowser/source/persistency/mctruth/include/G4PersistencyManager.hh' l='50'>// Class Description:
//   Manager base class to handle event store and retrieve operation.
//   Actual persistency implementation should be handled with 
//   derived classes.
// 
//   Each persistency package should implement derived classes of
//   G4VHepMCIO, G4VMCTruthIO, G4VPHitIO, G4VPDigitIO, G4VPEventIO.
//   Concreate G4PersistencyManager should implement the methods
//   HepMCIO(), MCTruthIO(), HitIO(), DigitIO() and EventIO() to
//   return the pointers of the above classes.
//   G4PersistencyManager handles the sequence of the storing and
//   retrieving of the persistent object of each type, along with
//   the transaction handling.
// 
//   Retrieving a HepMC event:
// 
//        G4PersistencyManager::Retrieve( HepMC::GenEvent*&amp; )
//         |
//         |  ... StartRead() ...
//         |
//         |  ... Commit() ...
//         V
// 
//   Storing a Geant4 event:
// 
//        G4PersistencyManager::Store( G4Pevent* )
//         |
//         |  ... StartUpdate() ...
//         |
//         |  ... MCTruthIO()-&gt;Store( MCTruth event ) ...
//         |
//         |  ... HitIO()-&gt;Store( hit_collection_of_event ) ...
//         |
//         |  ... DigitIO()-&gt;Store( digit_collection_of_event ) ...
//         |
//         |  ... EventIO()-&gt;Store( event with hits and digits ) ...
//         |
//         |  ... Commit() ...
//         V
// 
//   Retrieving a Geant event:
// 
//        G4PersistencyManager::Retrieve( event )
//         |
//         |  ... StartRead() ...
//         |
//         |  ... EventIO()-&gt;Retrieve( event ) ...
//         |
//         |  ... Commit() ...
//         V
// 
//   Hit collection and digit collection of each detector component
//   should be handled by detector specific I/O manager, which
//   should be registered to the G4PersistencyCenter with
//   AddHCIOmanager() and AddDCIOmanager().  Usually this is done
//   through a command
// 
//      /Persistency/Store/Using/HitIO &lt;detector_io_manager_name&gt;
// 
//   which is handled by G4PersistencyCenterMessenger.
// 
//   A static template declaration of G4HCIOentryT&lt;class&gt; must be
//   implementated for each I/O manager.</doc>
<fun r='_ZN20G4PersistencyManagerC1EP19G4PersistencyCenteri'/>
<fun r='_ZN20G4PersistencyManagerD1Ev'/>
<fun r='_ZN20G4PersistencyManager6CreateEv'/>
<fun r='_ZN20G4PersistencyManager7GetNameEv'/>
<fun r='_ZN20G4PersistencyManager7EventIOEv'/>
<fun r='_ZN20G4PersistencyManager5HitIOEv'/>
<fun r='_ZN20G4PersistencyManager7DigitIOEv'/>
<fun r='_ZN20G4PersistencyManager9MCTruthIOEv'/>
<fun r='_ZN20G4PersistencyManager18TransactionManagerEv'/>
<fun r='_ZN20G4PersistencyManager10InitializeEv'/>
<fun r='_ZN20G4PersistencyManager15SetVerboseLevelEi'/>
<fun r='_ZN20G4PersistencyManager5StoreEPK7G4Event'/>
<fun r='_ZN20G4PersistencyManager8RetrieveERP7G4Event'/>
<fun r='_ZN20G4PersistencyManager5StoreEPK5G4Run'/>
<fun r='_ZN20G4PersistencyManager8RetrieveERP5G4Run'/>
<fun r='_ZN20G4PersistencyManager5StoreEPK17G4VPhysicalVolume'/>
<fun r='_ZN20G4PersistencyManager8RetrieveERP17G4VPhysicalVolume'/>
<fun r='_ZN20G4PersistencyManager21GetPersistencyManagerEv'/>
<mbr r='G4PersistencyManager::f_pc' t='G4PersistencyCenter *'/>
<mbr r='G4PersistencyManager::m_verbose' t='int'/>
<mbr r='G4PersistencyManager::nameMgr' t='int'/>
<mbr r='G4PersistencyManager::f_is_initialized' t='G4bool'/>
