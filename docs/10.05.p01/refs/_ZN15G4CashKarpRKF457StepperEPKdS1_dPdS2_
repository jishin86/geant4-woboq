<dec f='codebrowser/source/geometry/magneticfield/include/G4CashKarpRKF45.hh' l='59' type='void G4CashKarpRKF45::Stepper(const G4double * y, const G4double * dydx, G4double h, G4double * yout, G4double * yerr)'/>
<inh f='codebrowser/source/geometry/magneticfield/include/G4MagIntegratorStepper.hh' l='64' c='_ZN22G4MagIntegratorStepper7StepperEPKdS1_dPdS2_'/>
<def f='codebrowser/source/geometry/magneticfield/src/G4CashKarpRKF45.cc' l='119' ll='218' type='void G4CashKarpRKF45::Stepper(const G4double * yInput, const G4double * dydx, G4double Step, G4double * yOut, G4double * yErr)'/>
<use f='codebrowser/source/geometry/magneticfield/src/G4CashKarpRKF45.cc' l='252' u='c' c='_ZNK15G4CashKarpRKF459DistChordEv'/>
<doc f='codebrowser/source/geometry/magneticfield/src/G4CashKarpRKF45.cc' l='109'>//////////////////////////////////////////////////////////////////////
//
// Given values for n = 6 variables yIn[0,...,n-1] 
// known  at x, use the fifth-order Cash-Karp Runge-
// Kutta-Fehlberg-4-5 method to advance the solution over an interval
// Step and return the incremented variables as yOut[0,...,n-1]. Also
// return an estimate of the local truncation error yErr[] using the
// embedded 4th-order method. The user supplies routine
// RightHandSide(y,dydx), which returns derivatives dydx for y .</doc>
